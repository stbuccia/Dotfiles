call plug#begin()

Plug 'sheerun/vim-polyglot' " A solid language pack for Vim. 
Plug 'donRaphaco/neotex', { 'for': 'tex' } " latex live preview
Plug 'vim-airline/vim-airline' " lean & mean status/tabline for vim that's light as air 
Plug 'neomake/neomake'
Plug 'junegunn/fzf', {'dir' : '~/.fzf', 'do': './install --all'} " fzf che si aggiorna in automatico

" Theme

Plug 'mhartington/oceanic-next'
Plug 'arcticicestudio/nord-vim'

"set completeopt=noinsert,menuone,noselect

" Generic Programming Support
Plug 'honza/vim-snippets'
Plug 'Townk/vim-autoclose'
Plug 'tomtom/tcomment_vim'
Plug 'tobyS/vmustache'
Plug 'janko-m/vim-test'
Plug 'maksimr/vim-jsbeautify'

Plug 'scrooloose/nerdtree'

"" Markdown / Writting
Plug 'reedes/vim-pencil'
Plug 'tpope/vim-markdown'
Plug 'jtratner/vim-flavored-markdown'
Plug 'dpelle/vim-LanguageTool'

" Git Support
Plug 'airblade/vim-gitgutter'

" PHP and others
" Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'phpactor/phpactor'
Plug 'phpactor/ncm2-phpactor'
Plug 'amiorin/vim-project'
Plug 'mhinz/vim-startify'
Plug 'StanAngeloff/php.vim'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'phpactor/phpactor'
Plug 'adoy/vim-php-refactoring-toolbox'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'SirVer/ultisnips'

" Plug 'honza/vim-snippets'
Plug 'majutsushi/tagbar'
Plug 'joonty/vdebug'
Plug 'tobyS/vmustache'
Plug 'tobyS/pdv'
Plug 'ryanoasis/vim-devicons'
Plug 'ctrlpvim/ctrlp.vim' " fuzzy find files

Plug 'jaxbot/github-issues.vim'

" NeoVim only plugins
if has('nvim')
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'kyazdani42/nvim-web-devicons'
    Plug 'bfredl/nvim-miniyank'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'shaunsingh/nord.nvim'
    Plug 'scrooloose/nerdcommenter'
    Plug 'catppuccin/nvim'
endif
call plug#end()

" NeoMake automatic
"call neomake#configure#automake('w')
"call neomake#configure#automake('nw', 750)
"call neomake#configure#automake('rw', 1000)
"call neomake#configure#automake('nrwi', 500)

if (has("termguicolors"))
 set termguicolors
endif
"color theme (available only for neovim)
"colorscheme OceanicNext
if !has('nvim')
    colorscheme nord
endif

""color theme (available only for neovim)
syntax enable

filetype plugin on
filetype plugin indent on
set smartindent
set smarttab
set relativenumber
inoremap <C-Backspace><Esc>dbi
nnoremap <C-n> :NERDTreeToggle<CR>
set number
set shiftwidth=1
set path^=**              " Recursive file search starting from current dir
set wildmenu              " Tab autocompletion in menu
set wildignorecase        " Ignore case when autocomplete
set autoread              " Autoreload file if modified from external command
set hlsearch              " Highlight all search results
set smartcase             " Smart-case search
set ignorecase            " Case-insensitive
set incsearch             " Incremental search
set autoindent            " Auto-indent
set smartindent           " Smart indent
set tabstop=4             " show existing tab with 4 spaces width
set shiftwidth=4          " when indenting with '>', use 4 spaces width
set expandtab             " On pressing tab, insert 4 spaces
set foldmethod=syntax     " Fold according to syntax
set linebreak             " Break long lines at spaces, not in the middle of a word
set hidden                " Allow to switch buffer without saving it
set colorcolumn=+1        " Highlight column where the 81/th char lives
set shell=/bin/bash       " Which shell to use
set splitright            " vsplit on the right
set mouse=a               " Enable mouse in terminal vim
set noshowmode            " Don't show the standard 'Inserisci'
set runtimepath^=~/.vim/bundle/ctrlp.vim
set encoding=utf-8        " UTF-8 encoding
set updatetime=2000       " Dopo due secondi di inattivit√† completa salva
set clipboard=unnamedplus " y e p ora funzionano sulla clipboard
"set spell                 " Attivo lo spellcheck
set spelllang=it,en       " Dizionari che voglio
set rtp+=/home/stefano/.opam/4.06.1/share/merlin/vim " Merlin 
set clipboard=unnamedplus "Attiva il copia e incolla su Linux

" Cursor shape (insert, normal, replace)
let &t_SI = "\<Esc>[6 q"    
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" vim-pathogen

execute pathogen#infect()
syntax on
filetype plugin indent on

" Syntastic

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""" added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 
""let s:opam_share_dir = system("opam config var share")
""let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')
""
""let s:opam_configuration = {}
""
""function! OpamConfOcpIndent()
""  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
""endfunction
""let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')
""
""function! OpamConfOcpIndex()
""  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
""endfunction
""let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')
""
""function! OpamConfMerlin()
""  let l:dir = s:opam_share_dir . "/merlin/vim"
""  execute "set rtp+=" . l:dir
""endfunction
""let s:opam_configuration['merlin'] = function('OpamConfMerlin')
""
""let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
""let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
""let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
""for tool in s:opam_packages
""  " Respect package order (merlin should be after ocp-index)
""  if count(s:opam_available_tools, tool) > 0
""    call s:opam_configuration[tool]()
""  endif
""endfor
""" ## end of OPAM user-setup addition for vim / base ## keep this line
""autocmd CursorHold * silent! update  " autosave
""
